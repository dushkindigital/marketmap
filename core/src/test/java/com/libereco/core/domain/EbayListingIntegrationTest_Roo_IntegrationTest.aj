// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.libereco.core.domain;

import com.libereco.core.domain.EbayListingDataOnDemand;
import com.libereco.core.domain.EbayListingIntegrationTest;
import com.libereco.core.repository.EbayListingRepository;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EbayListingIntegrationTest_Roo_IntegrationTest {
    
    declare @type: EbayListingIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: EbayListingIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: EbayListingIntegrationTest: @Transactional;
    
    @Autowired
    private EbayListingDataOnDemand EbayListingIntegrationTest.dod;
    
    @Autowired
    EbayListingRepository EbayListingIntegrationTest.ebayListingRepository;
    
    @Test
    public void EbayListingIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", dod.getRandomEbayListing());
        long count = ebayListingRepository.count();
        Assert.assertTrue("Counter for 'EbayListing' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void EbayListingIntegrationTest.testFind() {
        EbayListing obj = dod.getRandomEbayListing();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to provide an identifier", id);
        obj = ebayListingRepository.findOne(id);
        Assert.assertNotNull("Find method for 'EbayListing' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'EbayListing' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void EbayListingIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", dod.getRandomEbayListing());
        long count = ebayListingRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'EbayListing', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<EbayListing> result = ebayListingRepository.findAll();
        Assert.assertNotNull("Find all method for 'EbayListing' illegally returned null", result);
        Assert.assertTrue("Find all method for 'EbayListing' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void EbayListingIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", dod.getRandomEbayListing());
        long count = ebayListingRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<EbayListing> result = ebayListingRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'EbayListing' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'EbayListing' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void EbayListingIntegrationTest.testFlush() {
        EbayListing obj = dod.getRandomEbayListing();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to provide an identifier", id);
        obj = ebayListingRepository.findOne(id);
        Assert.assertNotNull("Find method for 'EbayListing' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyEbayListing(obj);
        Integer currentVersion = obj.getVersion();
        ebayListingRepository.flush();
        Assert.assertTrue("Version for 'EbayListing' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void EbayListingIntegrationTest.testSaveUpdate() {
        EbayListing obj = dod.getRandomEbayListing();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to provide an identifier", id);
        obj = ebayListingRepository.findOne(id);
        boolean modified =  dod.modifyEbayListing(obj);
        Integer currentVersion = obj.getVersion();
        EbayListing merged = ebayListingRepository.save(obj);
        ebayListingRepository.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'EbayListing' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void EbayListingIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", dod.getRandomEbayListing());
        EbayListing obj = dod.getNewTransientEbayListing(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'EbayListing' identifier to be null", obj.getId());
        ebayListingRepository.save(obj);
        ebayListingRepository.flush();
        Assert.assertNotNull("Expected 'EbayListing' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void EbayListingIntegrationTest.testDelete() {
        EbayListing obj = dod.getRandomEbayListing();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'EbayListing' failed to provide an identifier", id);
        obj = ebayListingRepository.findOne(id);
        ebayListingRepository.delete(obj);
        ebayListingRepository.flush();
        Assert.assertNull("Failed to remove 'EbayListing' with identifier '" + id + "'", ebayListingRepository.findOne(id));
    }
    
}
