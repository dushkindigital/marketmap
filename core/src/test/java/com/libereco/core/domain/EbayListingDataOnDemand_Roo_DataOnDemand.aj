// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.libereco.core.domain;

import com.libereco.core.domain.EbayListing;
import com.libereco.core.domain.EbayListingDataOnDemand;
import com.libereco.core.domain.LiberecoListing;
import com.libereco.core.domain.ReturnPolicy;
import com.libereco.core.repository.EbayListingRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EbayListingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EbayListingDataOnDemand: @Component;
    
    private Random EbayListingDataOnDemand.rnd = new SecureRandom();
    
    private List<EbayListing> EbayListingDataOnDemand.data;
    
    @Autowired
    EbayListingRepository EbayListingDataOnDemand.ebayListingRepository;
    
    public EbayListing EbayListingDataOnDemand.getNewTransientEbayListing(int index) {
        EbayListing obj = new EbayListing();
        setBestOfferEnabled(obj, index);
        setBoldTitleChecked(obj, index);
        setBorderChecked(obj, index);
        setBuyItNowPrice(obj, index);
        setDispatchTimeMax(obj, index);
        setLiberecoListing(obj, index);
        setLotSize(obj, index);
        setPaypalEmail(obj, index);
        setReservePrice(obj, index);
        setReturnPolicy(obj, index);
        setSetAutoPay(obj, index);
        setStartPrice(obj, index);
        setVatPercent(obj, index);
        return obj;
    }
    
    public void EbayListingDataOnDemand.setBestOfferEnabled(EbayListing obj, int index) {
        Boolean bestOfferEnabled = Boolean.TRUE;
        obj.setBestOfferEnabled(bestOfferEnabled);
    }
    
    public void EbayListingDataOnDemand.setBoldTitleChecked(EbayListing obj, int index) {
        Boolean boldTitleChecked = Boolean.TRUE;
        obj.setBoldTitleChecked(boldTitleChecked);
    }
    
    public void EbayListingDataOnDemand.setBorderChecked(EbayListing obj, int index) {
        Boolean borderChecked = Boolean.TRUE;
        obj.setBorderChecked(borderChecked);
    }
    
    public void EbayListingDataOnDemand.setBuyItNowPrice(EbayListing obj, int index) {
        Double buyItNowPrice = new Integer(index).doubleValue();
        obj.setBuyItNowPrice(buyItNowPrice);
    }
    
    public void EbayListingDataOnDemand.setDispatchTimeMax(EbayListing obj, int index) {
        Integer dispatchTimeMax = new Integer(index);
        obj.setDispatchTimeMax(dispatchTimeMax);
    }
    
    public void EbayListingDataOnDemand.setLiberecoListing(EbayListing obj, int index) {
        LiberecoListing liberecoListing = null;
        obj.setLiberecoListing(liberecoListing);
    }
    
    public void EbayListingDataOnDemand.setLotSize(EbayListing obj, int index) {
        Integer lotSize = new Integer(index);
        obj.setLotSize(lotSize);
    }
    
    public void EbayListingDataOnDemand.setPaypalEmail(EbayListing obj, int index) {
        String paypalEmail = "foo" + index + "@bar.com";
        obj.setPaypalEmail(paypalEmail);
    }
    
    public void EbayListingDataOnDemand.setReservePrice(EbayListing obj, int index) {
        Double reservePrice = new Integer(index).doubleValue();
        obj.setReservePrice(reservePrice);
    }
    
    public void EbayListingDataOnDemand.setReturnPolicy(EbayListing obj, int index) {
        ReturnPolicy returnPolicy = ReturnPolicy.class.getEnumConstants()[0];
        obj.setReturnPolicy(returnPolicy);
    }
    
    public void EbayListingDataOnDemand.setSetAutoPay(EbayListing obj, int index) {
        Boolean setAutoPay = Boolean.TRUE;
        obj.setSetAutoPay(setAutoPay);
    }
    
    public void EbayListingDataOnDemand.setStartPrice(EbayListing obj, int index) {
        Double startPrice = new Integer(index).doubleValue();
        obj.setStartPrice(startPrice);
    }
    
    public void EbayListingDataOnDemand.setVatPercent(EbayListing obj, int index) {
        Float vatPercent = new Integer(index).floatValue();
        obj.setVatPercent(vatPercent);
    }
    
    public EbayListing EbayListingDataOnDemand.getSpecificEbayListing(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EbayListing obj = data.get(index);
        Long id = obj.getId();
        return ebayListingRepository.findOne(id);
    }
    
    public EbayListing EbayListingDataOnDemand.getRandomEbayListing() {
        init();
        EbayListing obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ebayListingRepository.findOne(id);
    }
    
    public boolean EbayListingDataOnDemand.modifyEbayListing(EbayListing obj) {
        return false;
    }
    
    public void EbayListingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ebayListingRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EbayListing' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EbayListing>();
        for (int i = 0; i < 10; i++) {
            EbayListing obj = getNewTransientEbayListing(i);
            try {
                ebayListingRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            ebayListingRepository.flush();
            data.add(obj);
        }
    }
    
}
